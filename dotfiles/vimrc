colorscheme elflord

" Spaces & Tabs {{{
set tabstop=4       " number of visual spaces per TAB
set softtabstop=4   " number of spaces in tab when editing
set expandtab       " tabs are expanded to spaces
set smarttab        " auto indents
set shiftwidth=4    " stops smarttab from double-indenting
" }}}

" UI Config {{{
set number          " show line numbers
set showcmd         " show command in bottom bar
set cursorline      " underline current line
filetype plugin indent on  " load filetype-specific indent files
set wildmenu        " visual autocomplete for command menu
set showmatch       " highlight matching [{(}}]
set ruler           " Show line number on bottom right of screen
" }}}

" Searching {{{
set incsearch       " search as characters are entered
set hlsearch        " highlight matches

" turn off search highlight
nnoremap <leader><space> :nohlsearch<CR> 
" }}}

" Folding {{{
set foldenable          " enable folding
set foldlevelstart=100    " close most folds by default
set foldmethod=syntax   " fold option

" space to toggle fold
nnoremap <space> za
" }}}

" Movement {{{

" move vertically by visual line
nnoremap j gj
nnoremap k gk

" move to beginning or end of line
noremap B ^
noremap E $

" highlight last inserted text
nnoremap gV `[v`]

" }}}

" Programming {{{
syntax enable       " enable syntax processing
set backspace=indent,eol,start  " Proper backspace behavior
" }}}

" Backups {{{
" move backups to tmp folder
set backup
set backupdir=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp
set backupskip=/tmp/*,/private/tmp/*
set directory=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp
set writebackup
" }}}

" Leader Shortcuts {{{
" open ag.vim
nnoremap <leader>a :Ag
" }}}

" Plugins (Vundle) {{{
set rtp+=~/.vim/bundle/Vundle.vim
filetype off
call vundle#begin()
Plugin 'VundleVim/Vundle.vim'
Plugin 'townk/vim-autoclose'
" Utility
Plugin 'ctrlpvim/ctrlp.vim'
" Plugin 'ludovicchabant/vim-gutentags'
" Visual
Plugin 'itchyny/lightline.vim'
Plugin 'scrooloose/nerdtree'
Plugin 'majutsushi/tagbar'
" Programming
Plugin 'scrooloose/syntastic'
" Plugin 'valloric/youcompleteme'
 " Integrations
Plugin 'tpope/vim-fugitive'
Plugin 'vimwiki/vimwiki'
" Plugin 'ryanoasis/vim-devicons'
Plugin 'leafgarland/typescript-vim'
call vundle#end()
filetype plugin indent on
" }}}

" Vimwiki {{{
set nocompatible
filetype plugin on
syntax on

let g:vimwiki_list = [{'path': '$VIMWIKI', 'syntax': 'markdown', 'ext': '.md'}]

" vimwiki will not affect files outside wikihome
let g:vimwiki_global_ext = 0

" let vimwiki use markdown style folding
let g:vimwiki_folding = 'custom'

" vimwiki generate template
au BufNewFile $VIMWIKI/diary/*.md :silent 0r !$CONFIG/scripts/vimwiki-diary-template.py '%'
" }}}

" Fuzzy Finder (CtrlP) {{{
" CtrlP
:let g:ctrlp_match_window = 'bottom,order:ttb'      " ctrlp lists files top to bottom
:let g:ctrlp_switch_buffer = 0                      " always open new buffer
:let g:ctrlp_working_path_mode = 'ra'
:let g:ctrlp_user_command = 'ag %s -l --nocolor --hidden -g ""' " use ag to search
:let g:ctrlp_custom_ignore = 'node_modules|.git'
nnoremap <leader>s :CtrlP<CR>
nnoremap <C-p><C-p> :CtrlP<CR>
nnoremap <C-p><C-o> :CtrlPTag<CR>

" ctrl+shift+\ or - to open horizontal or vertical split
let g:ctrlp_prompt_mappings = {
    \ 'AcceptSelection("h")': ['<c-x>', '<c-\>'],
    \ 'AcceptSelection("v")': ['<c-v>', '<c-_>'],
    \}
" }}}

" Status Bar (Lightline) {{{
set laststatus=2
let g:lightline = {
      \ 'colorscheme': 'wombat',
      \ }
" }}}

" NERDTree {{{
map <C-n> :NERDTreeToggle<CR>
let g:NERDTreeMapOpenSplit = '-'
let g:NERDTreeMapOpenVSplit = '\'
" }}}

" Linting (Syntastic) {{{}
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_mode_map = { 'mode': 'passive', 'active_filetypes': [],'passive_filetypes': [] }
nnoremap <C-w>E :SyntasticCheck<CR> :SyntasticToggleMode<CR>
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
let g:syntastic_python_checkers = ['pylint']
let g:syntastic_javascript_checkers=['eslint']
let g:syntastic_typescript_checkers=['tslint']
let g:syntastic_go_checkers = ['go']
let g:syntastic_java_checkers = ['javac']

noremap <leader><CR> :SyntasticCheck<CR>
noremap <leader>[ :lprev<CR>
noremap <leader>] :lnext<CR>
" }}}

" Tags (Tagbar + Gutentags) {{{
map <C-m> :TagbarToggle<CR>
let g:gutentags_ctags_exclude = ["node_modules"]
" let g:gutentags_cache_dir = '/tmp/gutentags'

" Tag Commands
" <C-]> - Go to definition
" <C-T> - Return from definition
" <C-W><C-]> - Open definition in horizontal split

" Custom Tag Commands
" Go to definition
map <C-]><C-]> :exec("tag ".expand("<cword>"))<CR>
" Open definition in new tab
map <C-]><C-T> :tab split<CR>:exec("tag ".expand("<cword>"))<CR>
" <A
" Open definition in vertical split
map <C-]>\ :vsp <CR>:exec("tag ".expand("<cword>"))<CR>
" Open definition in horizontal split
map <C-]>- :sp <CR>:exec("tag ".expand("<cword>"))<CR>
" }}}

" CUSTOM FUNCTIONS {{{

" Tmux
" allows cursor change in tmux mode
if exists('$TMUX')
    let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
    let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"
else
    let &t_SI = "\<Esc>]50;CursorShape=1\x7"
    let &t_EI = "\<Esc>]50;CursorShape=0\x7"
endif

" Toggle Relative Number
function! ToggleNumber()
    if(&relativenumber == 1)
        set norelativenumber
        set number
    else
        set relativenumber
    endif
endfunc
" }}}

" Clipboard {{{
set clipboard=unnamedplus
" }}}

" Disable arrow movement, resize splits instead.
let g:resize_mode = 1
if get(g:, 'resize_mode')
	nnoremap <Up>    :resize +2<CR>
	nnoremap <Down>  :resize -2<CR>
	nnoremap <Left>  :vertical resize -2<CR>
	nnoremap <Right> :vertical resize +2<CR>
endif

set modeline
set modelines=1
" vim:foldmethod=marker:foldlevel=0
